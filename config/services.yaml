imports:
    - { resource: 'services/ecommerce/admin/services.yaml' }
    - { resource: 'services/ecommerce/shop/services.yaml' }
    - { resource: 'services/component/core.yaml' }
    - { resource: 'services/component/resource.yaml' }
    - { resource: 'services/component/user.yaml' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'pt_BR'
    token_ttl: 86400

    shop_resetting_email.from: "noreply@dev.com"
    shop_resetting_email.template: "shop/account/resetting/email.txt.twig"
    shop_resetting_email.route: "shop_resetting_reset"

    shop_register_email:
        from: "noreply@dev.com"
        template: "shop/account/register/email.txt.twig"
        route: "shop_register_confirm"

    admin_resetting_email.from: "noreply@dev.com"
    admin_resetting_email.template: "admin/resetting/email.txt.twig"
    admin_resetting_email.route: "admin_resetting_reset"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    App\Ecommerce\Shop\:
        resource: '../src/Ecommerce/Shop/*'
        exclude: '../src/Ecommerce/Shop/{Entity}'

    App\Ecommerce\Admin\:
        resource: '../src/Ecommerce/Admin/*'
        exclude: '../src/Ecommerce/Admin/{Entity}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Ecommerce\Shop\Controller\:
        resource: '../src/Ecommerce/Shop/Controller'
        tags: ['controller.service_arguments']

    App\Ecommerce\Admin\Controller\:
        resource: '../src/Ecommerce/Admin/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
